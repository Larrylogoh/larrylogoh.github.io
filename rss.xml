<rss version="2.0">
<channel>		 
  <title>Lawrence Logoh's blog</title>
  <link>https://www.lawrencelogoh.com</link>
  <description>Blog posts on Lawrence Logoh's blog</description>
  <generator></generator>

<item>
		<title>"Building a static site generator"</title>
		<link>https://www.lawrencelogoh.com/blog/2022-05-05-building-a-ssg.html</link>
		<pubDate>"2022-05-05"</pubDate>
		<guid>https://www.lawrencelogoh.com/blog/2022-05-05-building-a-ssg.html</guid>
		<description><![CDATA[    <article><h1 id="what-im-currently-using">What I’m currentlyusing</h1><p><ahref="https://github.com/lawrencelogoh/lawrencelogoh.github.io/blob/921d8d1012f73c6298b7d5412404b0f7b2a33ed/build">Abadly written bash script that depends on pup and pandoc</a>.</p><p>I don’t mind the pandoc dependency too much as I have it on all mysystems anyway. But the script is messy and I’d rather have somethingcleaner.</p><h1 id="why-not-just-use-x">Why not just use “x”?</h1><p>Most of the static site generators I’ve seen like Hugo and Jekyllseem too complicated for me. I’m not saying I can’t use them, I justfelt some friction and thought it would be cool to build my own.</p><h1 id="requirements">Requirements</h1><ul><li>Must have as few dependencies as possible.</li><li>Must work on UNIX/UNIX-like systems</li><li>Must generate an RSS file with all blog posts</li><li>Must arrange blog posts by date</li></ul><h1 id="language-choice">Language choice</h1><p>My initial instinct was to use python since I already used bash but Ithink I’ll go with bash again. I’ll try to limit the programs I use init to what you’ll find on a standard Linux/BSD install.</p><h1 id="dependencies">Dependencies</h1><p>Luckily, there are only two dependencies. yq and pandoc</p><p>Keep in mind this is for Linux/BSD environments. My main system isAlpine Linux so it’s guaranteed to work on that.</p><h1 id="how-it-used-to-work">How it used to work</h1><p><ahref="https://github.com/lawrencelogoh/lawrencelogoh.github.io/blob/921d8d1012f73c6298b7d5412404b0f7b2a33ed/build">Thescript then</a>.</p><p>The program was split into 4 functions.</p><ul><li>genhtml</li><li>genblogindex</li><li>genothers</li><li>genrss</li></ul><h2 id="genhtml">genhtml</h2><p>What this did was look in the blog/posts directory for md files andthen use pandoc to compile them to html.</p><h2 id="genblogindex">genblogindex</h2><p>This looked in the blog directory for html files. It adds them to alist that gets sorted. It loops through the list and adds a link of apost to the index.md after getting the title and date from the htmlfiles.</p><h2 id="genothers">genothers</h2><p>What this did is compile the index files for the root directory andother sub-directories.</p><h2 id="genrss">genrss</h2><p>This loops through the list of sorted html files first. Second, itgets the title, date and the article tag from each html file and createsa “post” for each html file.</p><h2 id="the-problem">The problem</h2><p>After defining the functions, this is what calling them lookedlike.</p><div class="sourceCode" id="cb1"><preclass="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">rm</span> <span class="at">-f</span> ./blog/<span class="pp">*</span>.html</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">genhtml</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ex">genblogindex</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ex">genhtml</span> <span class="co"># shouldn&#39;t be doing this twice</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ex">genothers</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ex">genrss</span></span></code></pre></div><p>After deleting the html of all the blog posts I compile them again.Then I create the <strong>index.md</strong> file. I then have to compileit again because it didn’t compile the latest version. Then it does theother pages and finally the RSS file.</p><p>My main problem with this was calling <strong>genhtml</strong> twice.The <strong>genothers</strong> function also bothered me because I’dhave to add another line for every section. I also did not like thedependency on pup.</p><p>I knew it should be possible to do it without pup but I didn’t havethe desire to look into it. So I decided to rewrite/improve the scriptso it works in a way I’m more comfortable with.</p><h1 id="how-it-works-now">How it works now</h1><p><ahref="https://github.com/lawrencelogoh/lawrencelogoh.github.io/blob/9c27fe701fb522f936147f5ad5fbd01a02f7ad13/build">Thescript now</a></p><p>Now the number of functions is down to three instead of four. Also,this script assumes the folder structure below for certaindirectories.</p><pre><code>├── _directory│   ├── _src│   │   └── post.md│   └── post.html</code></pre><h2 id="genblogindex-1">genblogindex</h2><p>What this does is, it first loops through all the files in the<strong>blog/src</strong> directory except the index.md file. Second, itgets the title, date and filename, creates a markdown link and adds thelink to a list.</p><p><em>NOTE: I know it doesn’t do anything with the date. I used it as akey in an associative array. I haven’t figured out how to sort the keysyet, but when I do they’ll be used and I won’t have to have dates in thepost filenames.</em></p><h2 id="gensite">gensite</h2><p>Before the definition of this function, there is a list ofdirectories I want this to use that I define. If I want to add adirectory I can just add it there, or even add all directoriesprogrammatically instead.</p><p>For every directory in the list first deletes all the html files init. Then it loops through the markdown files in the <strong>src</strong>directory and compiles them to html in the directory itself.</p><h2 id="genrss-1">genrss</h2><p>This does exactly what it used to do. The difference is instead ofusing pup to get data from the html files. It gets the title and datefrom the markdown files with head and yq and it uses awk to get the htmlfor the post.</p><h1 id="conclusion">Conclusion</h1><p>I’m happy with how it works now. The one problem I have is that Ihave to still name the files with the dates so they get sorted well. Ican live with that right now, but I’ll improve that in the futurewithout using something like pup.</p><p>Ideally, I’d also like to reduce the dependencies to pandoc andcommon UNIX utilities. It could also be fun writing a small script tocompile markdown to html. But this works for now.</p></article>]]></description>
		</item>
</channel>
</rss>
